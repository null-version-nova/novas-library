plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    // Adds the Kotlin Gradle plugin
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
    // OPTIONAL Kotlin Serialization plugin
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.21'
}

repositories {
    // Add KFF Maven repository
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}


architectury {
    platformSetupLoomIde()
    forge()
}

def generated_resources = file("src/main/generated")

clean {
    delete(file('src/processed'))
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "novas_library-common.mixins.json"
        mixinConfig "novas_library.mixins.json"
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", mod_id
            programArgs "--output", generated_resources.absolutePath
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    implementation "thedarkcolour:kotlinforforge:${rootProject.kotlin_for_forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}



processResources {
    def replaceProperties= [
            mod_id: mod_id,
            version: project.version,
            mod_name: mod_name,
            minecraft_version: minecraft_version,
            architectury_version: architectury_version,
            kotlin_for_forge_version: kotlin_for_forge_version.tokenize(".")[0],
            forge_version: forge_version.tokenize(".")[0]
    ]

    inputs.properties replaceProperties

    filesMatching("META-INF/mods.toml") {
        expand replaceProperties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

base {
    archivesName = rootProject.archives_base_name + "-" + project.name + "-" + minecraft_version
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name + "-" + minecraft_version
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

modrinth {
    projectId = "novas-library"
    versionName = "Forge ${minecraft_version} ${version}"
    uploadFile = remapJar
    gameVersions = [ minecraft_version ]
    loaders = [ project.name ]
    autoAddDependsOn = true
}


sourceSets {
    main {
        kotlin {
            srcDirs = ['src/processed/kotlin','src/main/kotlin']
        }
        resources {
            srcDir file('src/main/generated')
        }
    }
}

idea {
    module {
        sourceDirs = [file('src/template/kotlin'),file('src/main/kotlin')]
        excludeDirs = [file('src/processed/kotlin')]
    }
}

apply plugin: "com.igormaznitsa.jcp"

preprocess {
    sources = [file('src/template')]
    allowWhitespaces = false
    fileExtensions = ['java','kt']
    keepComments = 'remove_jcp_only'
    keepLines = false
    verbose = true
    vars = ['MC': rootProject.mcVersion]
    target = file('src/processed')
    print(outcomingFiles.getAsFileTree())
    outputs.upToDateWhen { false }
}

compileKotlin.dependsOn(preprocess)
compileJava.dependsOn(preprocess)
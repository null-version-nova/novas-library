plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    try {
        accessWidenerPath = project(":${parent.name}:common").loom.accessWidenerPath
    } catch(ignored) {}


    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${parent.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${parent.fabric_api_version}+${parent.minecraft_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${parent.architectury_version}"

    common(project(path: ":${parent.name}:common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":${parent.name}:common", configuration: "transformProductionFabric")) { transitive false }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    modImplementation "net.fabricmc:fabric-language-kotlin:${rootProject.fabric_kotlin_version}"
}

processResources {
    def replaceProperties= [
            mod_id: mod_id,
            version: project.version,
            mod_name: mod_name,
            minecraft_version: minecraft_version,
            architectury_version: architectury_version
    ]

    inputs.properties replaceProperties

    filesMatching("fabric.mod.json") {
        expand replaceProperties
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":${parent.name}:common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

base {
    archivesName = rootProject.archives_base_name + "-" + project.name + "-" + minecraft_version
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name + "-" + minecraft_version
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

modrinth {
    projectId = "novas-library"
    versionName = "Fabric ${minecraft_version} ${version}"
    uploadFile = remapJar
    gameVersions = [ minecraft_version ]
    loaders = [ project.name ]
    autoAddDependsOn = true
}

repositories {
    mavenCentral()
}
kotlin {
    jvmToolchain(17)
}

apply plugin: "com.igormaznitsa.jcp"

tasks.register("merge") {
    copy {
        from('build/processed')
        into('build/merged')
    }
    copy {
        from('src/main')
        into('build/merged')
    }
}.get().dependsOn(preprocess)

if (parent.name == "root") {
    sourceSets {
        main {
            kotlin {
                srcDirs = ['src/main/kotlin']
            }
            resources {
                srcDirs = ['src/main/resources','src/main/generated']
            }
        }
    }
} else {
    preprocess {
        sources = [file("../../root/${project.name}/src/main")]
        allowWhitespaces = false
        keepComments = 'remove_jcp_only'
        fileExtensions = ['java','kt']
        keepLines = false
        verbose = true
        vars = ['MC': parent.mcVersion]
        target = file('build/processed')
        print(outcomingFiles.getAsFileTree())
        outputs.upToDateWhen { false }
    }

    compileKotlin.dependsOn(merge)
    compileJava.dependsOn(merge)

    sourceSets {
        main {
            kotlin {
                srcDirs = ['build/merged/kotlin']
            }
            resources {
                srcDirs = ['build/merged/resources','build/merged/generated']
            }
        }
    }
}
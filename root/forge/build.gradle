
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    // Adds the Kotlin Gradle plugin
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
    // OPTIONAL Kotlin Serialization plugin
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.21'
}

repositories {
    // Add KFF Maven repository
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

def generated_resources = file("src/main/generated")

loom {
    accessWidenerPath = project(":${parent.name}:common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "novas_library-common.mixins.json"
        mixinConfig "novas_library.mixins.json"
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", mod_id
            programArgs "--output", generated_resources.absolutePath
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${parent.minecraft_version}-${parent.forge_version}"
    implementation "thedarkcolour:kotlinforforge:${parent.kotlin_for_forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${parent.architectury_version}"

    common(project(path: ":${parent.name}:common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":${parent.name}:common", configuration: "transformProductionForge")) { transitive = false }
}



processResources {
    def replaceProperties= [
            mod_id: mod_id,
            version: project.version,
            mod_name: mod_name,
            minecraft_version: minecraft_version,
            architectury_version: architectury_version,
            kotlin_for_forge_version: kotlin_for_forge_version.tokenize(".")[0],
            forge_version: forge_version.tokenize(".")[0]
    ]

    inputs.properties replaceProperties

    filesMatching("META-INF/mods.toml") {
        expand replaceProperties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":${parent.name}:common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

base {
    archivesName = rootProject.archives_base_name + "-" + project.name + "-" + minecraft_version
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name + "-" + minecraft_version
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

modrinth {
    projectId = "novas-library"
    versionName = "Forge ${minecraft_version} ${version}"
    uploadFile = remapJar
    gameVersions = [ minecraft_version ]
    loaders = [ project.name ]
    autoAddDependsOn = true
}


apply plugin: "com.igormaznitsa.jcp"

tasks.register("merge") {
    copy {
        from('build/processed')
        into('build/merged')
    }
    inputs.files(fileTree('build/processed'),fileTree('src'))
    outputs.files(fileTree('build/merged'))
    doLast {
        fileTree('src').files.forEach {
            file("build/merged/${file('src').relativePath(it)}").delete()
        }
    }
    dependsOn(preprocess)
}

if (parent.name == "root") {
    sourceSets {
        main {
            kotlin {
                srcDirs = ['src/main/kotlin']
            }
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources','src/main/generated']
            }
        }
    }
} else {
    preprocess {
        sources = [file("../../root/${project.name}/src")]
        allowWhitespaces = false
        keepComments = 'remove_jcp_only'
        fileExtensions = ['java','kt']
        keepLines = false
        verbose = true
        vars = ['MC': parent.mcVersion]
        target = file('build/processed')
        outputs.upToDateWhen { false }
        outputs.files(fileTree('build/processed'))
        inputs.files(fileTree("../../root/${project.name}/src"))
    }

    compileKotlin.dependsOn(merge)
    compileJava.dependsOn(merge)
    processResources.dependsOn(merge)
    sourcesJar.dependsOn(merge)

    sourceSets {
        main {
            kotlin {
                srcDirs = ['build/merged/main/kotlin', 'src/main/kotlin']
            }
            java {
                srcDirs = ['build/merged/main/java','src/main/java']
            }
            resources {
                srcDirs = ['build/merged/main/resources','build/merged/main/generated','src/main/resources','src/main/generated']
            }
        }
    }
}
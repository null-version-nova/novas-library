plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}+${rootProject.minecraft_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

processResources {
    def replaceProperties= [
            mod_id: mod_id,
            version: project.version,
            mod_name: mod_name,
            minecraft_version: minecraft_version,
            architectury_version: architectury_version
    ]

    inputs.properties replaceProperties

    filesMatching("fabric.mod.json") {
        expand replaceProperties
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name + "-" + minecraft_version
            print(artifactId)
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
repositories {
    mavenCentral()
}
kotlin {
    jvmToolchain(17)
}

apply plugin: "com.igormaznitsa.jcp"

preprocess {
    sources = [file('src/main')]
    allowWhitespaces = false
    fileExtensions = ['java','kt']
    keepComments = 'remove_jcp_only'
    keepLines = false
    verbose = true
    vars = ['MC': rootProject.mcVersion]
    target = file('src/processed')
    print(outcomingFiles.getAsFileTree())
    outputs.upToDateWhen { false }
}

tasks.register("changeSourceFolder") {
    sourceSets {
        main {
            kotlin {
                srcDirs = ['src/processed/kotlin']
            }
        }
    }
    outputs.upToDateWhen { false }
}.get().dependsOn(preprocess)

compileKotlin.dependsOn(changeSourceFolder)
compileJava.dependsOn(changeSourceFolder)